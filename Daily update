terraform {
  required_version = ">= 1.5.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.40"
    }
  }
}

locals {
  tags = merge(
    {
      Module = "aws_guardduty"
    },
    var.tags
  )
}

# Create GuardDuty detector (main component)
resource "aws_guardduty_detector" "this" {
  enable                       = true
  finding_publishing_frequency  = var.finding_publishing_frequency

  datasources {
    s3_logs {
      enable = var.enable_s3_logs
    }

    kubernetes {
      audit_logs {
        enable = var.enable_eks_audit_logs
      }
    }

    malware_protection {
      scan_ec2_instance_with_findings {
        ebs_volumes = var.enable_ebs_malware_protection
      }
    }
  }

  tags = local.tags
}

# Optional: Organization-level setup (run in delegated admin account)
resource "aws_guardduty_organization_admin_account" "this" {
  count            = var.org_enable ? 1 : 0
  admin_account_id = var.org_admin_account_id
}

resource "aws_guardduty_organization_configuration" "this" {
  count       = var.org_enable ? 1 : 0
  detector_id = aws_guardduty_detector.this.id
  auto_enable = var.org_auto_enable_members

  datasources {
    s3_logs {
      auto_enable = var.enable_s3_logs
    }
    kubernetes {
      audit_logs {
        auto_enable = var.enable_eks_audit_logs
      }
    }
    malware_protection {
      scan_ec2_instance_with_findings {
        ebs_volumes = var.enable_ebs_malware_protection
      }
    }
  }

  depends_on = [aws_guardduty_organization_admin_account.this]
}

# Optional: Invite specific member accounts
resource "aws_guardduty_member" "members" {
  for_each    = var.members
  account_id  = each.value.account_id
  detector_id = aws_guardduty_detector.this.id
  email       = each.value.email
  invite      = var.members_invite

  disable_email_notification = var.members_disable_email
  message                    = var.members_invite_message
}
